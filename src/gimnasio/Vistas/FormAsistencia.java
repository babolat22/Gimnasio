
package gimnasio.Vistas;

import gimnasio.AccesoADatos.AsistenciaData;
import gimnasio.AccesoADatos.ClaseData;
import gimnasio.AccesoADatos.MembresiaData;
import gimnasio.AccesoADatos.SocioData;
import gimnasio.Entidades.Asistencia;
import gimnasio.Entidades.Clase;
import gimnasio.Entidades.Socio;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.sql.Time;
import java.time.LocalTime;
import java.sql.Date;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.Vector;
/**
 *
 * @author Javier
 */
public class FormAsistencia extends javax.swing.JInternalFrame {
    private DefaultTableModel modelo=new DefaultTableModel();
    private DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
    /**
     * Creates new form FormAsistencia
     */
  
    public FormAsistencia() {
        initComponents();
        llenarSelectorSocio();
        llenarSelectorClase();
        armarCabecera();
        escritorioAsistencia2.setVisible(false);
    }
    
    /*
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ImageIcon icon = new ImageIcon(getClass().getResource("/gimnasio/Imagenes/asistencia0.jpg"));
        Image image = icon.getImage();
        escritorioAsistencia1 = new javax.swing.JDesktopPane(){     public void paintComponent(Graphics g){         g.drawImage(image,0,0,getWidth(),getHeight(),this);     } };
        jtFormularioGestionMembresia = new javax.swing.JTextField();
        jtCartelTipoMembresia = new javax.swing.JTextField();
        jbGuardarAsistencia = new javax.swing.JButton();
        jbLimpiar = new javax.swing.JButton();
        jlError = new javax.swing.JLabel();
        jbBuscarAsistencia = new javax.swing.JButton();
        ImageIcon iconClase = new ImageIcon(getClass().getResource("/gimnasio/Imagenes/asistencia2.jpg")); 
        Image imageClase = iconClase.getImage();
        escritorioAsistencia2 = new javax.swing.JDesktopPane(){     public void paintComponent(Graphics g){         g.drawImage(imageClase,0,0,getWidth(),getHeight(),this);     } };
        jScrollPane5 = new javax.swing.JScrollPane();
        jtListadoAsistencia = new javax.swing.JTable();
        jbCerrarAsistencia = new javax.swing.JButton();
        jbModificarAsistencia = new javax.swing.JButton();
        jbLimpiarTablaAsistencia = new javax.swing.JButton();
        jcListar = new javax.swing.JComboBox<>();
        jtCartelAsistencia = new javax.swing.JTextField();
        jtIdAsistencia = new javax.swing.JTextField();
        jtCartelSocio = new javax.swing.JTextField();
        jcSocio = new javax.swing.JComboBox<>();
        jtCarteNombreClase = new javax.swing.JTextField();
        jcClase = new javax.swing.JComboBox<>();
        jtEntrenador = new javax.swing.JTextField();

        setClosable(true);

        escritorioAsistencia1.setPreferredSize(new java.awt.Dimension(1130, 510));

        jtFormularioGestionMembresia.setBackground(new java.awt.Color(0, 0, 0));
        jtFormularioGestionMembresia.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jtFormularioGestionMembresia.setForeground(new java.awt.Color(255, 255, 255));
        jtFormularioGestionMembresia.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtFormularioGestionMembresia.setText("FORMULARIO DE GESTIÃ“N DE ASISTENCIA");
        jtFormularioGestionMembresia.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(51, 51, 51), new java.awt.Color(0, 0, 0), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        jtFormularioGestionMembresia.setCaretColor(new java.awt.Color(255, 51, 255));
        jtFormularioGestionMembresia.setFocusable(false);

        jtCartelTipoMembresia.setBackground(new java.awt.Color(0, 0, 0));
        jtCartelTipoMembresia.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jtCartelTipoMembresia.setForeground(new java.awt.Color(255, 255, 255));
        jtCartelTipoMembresia.setText("Entrenador");
        jtCartelTipoMembresia.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(51, 51, 51), new java.awt.Color(0, 0, 0), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        jtCartelTipoMembresia.setCaretColor(new java.awt.Color(255, 51, 255));
        jtCartelTipoMembresia.setFocusable(false);

        jbGuardarAsistencia.setBackground(new java.awt.Color(153, 153, 153));
        jbGuardarAsistencia.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jbGuardarAsistencia.setForeground(new java.awt.Color(0, 0, 0));
        jbGuardarAsistencia.setText("Guardar");
        jbGuardarAsistencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarAsistenciaActionPerformed(evt);
            }
        });

        jbLimpiar.setBackground(new java.awt.Color(153, 153, 153));
        jbLimpiar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jbLimpiar.setForeground(new java.awt.Color(0, 0, 0));
        jbLimpiar.setText("Limpiar");
        jbLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLimpiarActionPerformed(evt);
            }
        });

        jlError.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        jlError.setForeground(new java.awt.Color(255, 0, 51));
        jlError.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        jbBuscarAsistencia.setBackground(new java.awt.Color(153, 153, 153));
        jbBuscarAsistencia.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jbBuscarAsistencia.setForeground(new java.awt.Color(0, 0, 0));
        jbBuscarAsistencia.setText("Buscar");
        jbBuscarAsistencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarAsistenciaActionPerformed(evt);
            }
        });

        escritorioAsistencia2.setPreferredSize(new java.awt.Dimension(780, 440));
        escritorioAsistencia2.setBackground(new java.awt.Color(0, 0, 0));
        escritorioAsistencia2.setOpaque(false);

        jtListadoAsistencia.setAutoCreateRowSorter(true);
        jtListadoAsistencia.setForeground(new java.awt.Color(0, 0, 0));
        jtListadoAsistencia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID_Clase", "Nombre", "ID Entrenador", "Horario", "Capacidad", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtListadoAsistencia.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jtListadoAsistencia.setDoubleBuffered(true);
        jtListadoAsistencia.setFocusTraversalPolicyProvider(true);
        jtListadoAsistencia.setOpaque(false);
        jtListadoAsistencia.setSelectionBackground(new java.awt.Color(0, 51, 204));
        jtListadoAsistencia.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jtListadoAsistencia.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(jtListadoAsistencia);

        jbCerrarAsistencia.setBackground(new java.awt.Color(153, 153, 153));
        jbCerrarAsistencia.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jbCerrarAsistencia.setForeground(new java.awt.Color(0, 0, 0));
        jbCerrarAsistencia.setText("Cerrar");
        jbCerrarAsistencia.setMaximumSize(new java.awt.Dimension(83, 22));
        jbCerrarAsistencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCerrarAsistenciaActionPerformed(evt);
            }
        });

        jbModificarAsistencia.setBackground(new java.awt.Color(153, 153, 153));
        jbModificarAsistencia.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jbModificarAsistencia.setForeground(new java.awt.Color(0, 0, 0));
        jbModificarAsistencia.setText("Modificar");
        jbModificarAsistencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbModificarAsistenciaActionPerformed(evt);
            }
        });

        jbLimpiarTablaAsistencia.setBackground(new java.awt.Color(153, 153, 153));
        jbLimpiarTablaAsistencia.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jbLimpiarTablaAsistencia.setForeground(new java.awt.Color(0, 0, 0));
        jbLimpiarTablaAsistencia.setText("Limpiar Tabla");
        jbLimpiarTablaAsistencia.setMaximumSize(new java.awt.Dimension(85, 22));
        jbLimpiarTablaAsistencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLimpiarTablaAsistenciaActionPerformed(evt);
            }
        });

        jcListar.setBackground(new java.awt.Color(102, 102, 102));
        jcListar.setForeground(new java.awt.Color(0, 0, 0));
        jcListar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Listar Todas ", "Por Clase", "Por Socio", "Por Fecha" }));
        jcListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcListarActionPerformed(evt);
            }
        });

        escritorioAsistencia2.setLayer(jScrollPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioAsistencia2.setLayer(jbCerrarAsistencia, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioAsistencia2.setLayer(jbModificarAsistencia, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioAsistencia2.setLayer(jbLimpiarTablaAsistencia, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioAsistencia2.setLayer(jcListar, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout escritorioAsistencia2Layout = new javax.swing.GroupLayout(escritorioAsistencia2);
        escritorioAsistencia2.setLayout(escritorioAsistencia2Layout);
        escritorioAsistencia2Layout.setHorizontalGroup(
            escritorioAsistencia2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(escritorioAsistencia2Layout.createSequentialGroup()
                .addComponent(jcListar, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbModificarAsistencia, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbLimpiarTablaAsistencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbCerrarAsistencia, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 682, Short.MAX_VALUE)
        );
        escritorioAsistencia2Layout.setVerticalGroup(
            escritorioAsistencia2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(escritorioAsistencia2Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 182, Short.MAX_VALUE)
                .addGroup(escritorioAsistencia2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(escritorioAsistencia2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbCerrarAsistencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbLimpiarTablaAsistencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(escritorioAsistencia2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jcListar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbModificarAsistencia))))
        );

        jtCartelAsistencia.setBackground(new java.awt.Color(0, 0, 0));
        jtCartelAsistencia.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jtCartelAsistencia.setForeground(new java.awt.Color(255, 255, 255));
        jtCartelAsistencia.setText("ID Asistencia");
        jtCartelAsistencia.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(51, 51, 51), new java.awt.Color(0, 0, 0), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        jtCartelAsistencia.setCaretColor(new java.awt.Color(255, 51, 255));
        jtCartelAsistencia.setFocusable(false);

        jtIdAsistencia.setEnabled(false);
        jtIdAsistencia.setFocusable(false);

        jtCartelSocio.setBackground(new java.awt.Color(0, 0, 0));
        jtCartelSocio.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jtCartelSocio.setForeground(new java.awt.Color(255, 255, 255));
        jtCartelSocio.setText("Socio");
        jtCartelSocio.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(51, 51, 51), new java.awt.Color(0, 0, 0), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        jtCartelSocio.setCaretColor(new java.awt.Color(255, 51, 255));
        jtCartelSocio.setFocusable(false);

        jcSocio.setBackground(new java.awt.Color(153, 153, 153));
        jcSocio.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jcSocio.setForeground(new java.awt.Color(255, 255, 255));
        jcSocio.setMaximumRowCount(100);
        jcSocio.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jcSocio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcSocioActionPerformed(evt);
            }
        });

        jtCarteNombreClase.setBackground(new java.awt.Color(0, 0, 0));
        jtCarteNombreClase.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        jtCarteNombreClase.setForeground(new java.awt.Color(255, 255, 255));
        jtCarteNombreClase.setText(" Clase");
        jtCarteNombreClase.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(51, 51, 51), new java.awt.Color(0, 0, 0), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));
        jtCarteNombreClase.setCaretColor(new java.awt.Color(255, 51, 255));
        jtCarteNombreClase.setFocusable(false);
        jtCarteNombreClase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtCarteNombreClaseActionPerformed(evt);
            }
        });

        jcClase.setBackground(new java.awt.Color(153, 153, 153));
        jcClase.setFont(new java.awt.Font("Segoe UI", 1, 11)); // NOI18N
        jcClase.setForeground(new java.awt.Color(255, 255, 255));
        jcClase.setMaximumRowCount(100);
        jcClase.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jcClase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcClaseActionPerformed(evt);
            }
        });

        jtEntrenador.setEnabled(false);
        jtEntrenador.setFocusable(false);

        escritorioAsistencia1.setLayer(jtFormularioGestionMembresia, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioAsistencia1.setLayer(jtCartelTipoMembresia, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioAsistencia1.setLayer(jbGuardarAsistencia, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioAsistencia1.setLayer(jbLimpiar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioAsistencia1.setLayer(jlError, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioAsistencia1.setLayer(jbBuscarAsistencia, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioAsistencia1.setLayer(escritorioAsistencia2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioAsistencia1.setLayer(jtCartelAsistencia, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioAsistencia1.setLayer(jtIdAsistencia, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioAsistencia1.setLayer(jtCartelSocio, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioAsistencia1.setLayer(jcSocio, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioAsistencia1.setLayer(jtCarteNombreClase, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioAsistencia1.setLayer(jcClase, javax.swing.JLayeredPane.DEFAULT_LAYER);
        escritorioAsistencia1.setLayer(jtEntrenador, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout escritorioAsistencia1Layout = new javax.swing.GroupLayout(escritorioAsistencia1);
        escritorioAsistencia1.setLayout(escritorioAsistencia1Layout);
        escritorioAsistencia1Layout.setHorizontalGroup(
            escritorioAsistencia1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(escritorioAsistencia1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(escritorioAsistencia1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlError, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(escritorioAsistencia1Layout.createSequentialGroup()
                        .addGroup(escritorioAsistencia1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(escritorioAsistencia1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jtFormularioGestionMembresia, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(escritorioAsistencia1Layout.createSequentialGroup()
                                .addGroup(escritorioAsistencia1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jtCartelTipoMembresia, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtCartelSocio, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtCarteNombreClase, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtCartelAsistencia, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(escritorioAsistencia1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jcSocio, javax.swing.GroupLayout.Alignment.LEADING, 0, 206, Short.MAX_VALUE)
                                    .addComponent(jcClase, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jtEntrenador, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtIdAsistencia)))
                            .addGroup(escritorioAsistencia1Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(jbGuardarAsistencia, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbBuscarAsistencia, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(escritorioAsistencia2)
                .addContainerGap())
        );
        escritorioAsistencia1Layout.setVerticalGroup(
            escritorioAsistencia1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(escritorioAsistencia1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jtFormularioGestionMembresia, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(escritorioAsistencia1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(escritorioAsistencia1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(escritorioAsistencia2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(16, Short.MAX_VALUE))
                    .addGroup(escritorioAsistencia1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(escritorioAsistencia1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtCartelAsistencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtIdAsistencia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(escritorioAsistencia1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtCartelSocio)
                            .addComponent(jcSocio))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(escritorioAsistencia1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtCarteNombreClase)
                            .addComponent(jcClase))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(escritorioAsistencia1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtCartelTipoMembresia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtEntrenador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addComponent(jlError, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(escritorioAsistencia1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbGuardarAsistencia)
                            .addComponent(jbLimpiar)
                            .addComponent(jbBuscarAsistencia))
                        .addGap(23, 23, 23))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(escritorioAsistencia1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(escritorioAsistencia1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbGuardarAsistenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarAsistenciaActionPerformed
        cargar();
    }//GEN-LAST:event_jbGuardarAsistenciaActionPerformed

    private void jbLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLimpiarActionPerformed
        limpiarTodo();
    }//GEN-LAST:event_jbLimpiarActionPerformed

    private void jbBuscarAsistenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarAsistenciaActionPerformed
        limpiarTabla();
        llenarVectorListado();
        if(!escritorioAsistencia2.isVisible()){
            escritorioAsistencia2.setVisible(true);

        }
    }//GEN-LAST:event_jbBuscarAsistenciaActionPerformed

    private void jbCerrarAsistenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCerrarAsistenciaActionPerformed

        limpiarTabla();
        escritorioAsistencia2.setVisible(false);
    }//GEN-LAST:event_jbCerrarAsistenciaActionPerformed

    private void jbModificarAsistenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbModificarAsistenciaActionPerformed
        limpiarTodo();
       
      //  modificar();
    }//GEN-LAST:event_jbModificarAsistenciaActionPerformed

    private void jbLimpiarTablaAsistenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLimpiarTablaAsistenciaActionPerformed
        limpiarTabla();
    }//GEN-LAST:event_jbLimpiarTablaAsistenciaActionPerformed

    private void jcListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcListarActionPerformed
        limpiarTabla();
        llenarVectorListado();
    }//GEN-LAST:event_jcListarActionPerformed

    private void jcSocioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcSocioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcSocioActionPerformed

    private void jcClaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcClaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcClaseActionPerformed

    private void jtCarteNombreClaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtCarteNombreClaseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtCarteNombreClaseActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane escritorioAsistencia1;
    private javax.swing.JDesktopPane escritorioAsistencia2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton jbBuscarAsistencia;
    private javax.swing.JButton jbCerrarAsistencia;
    private javax.swing.JButton jbGuardarAsistencia;
    private javax.swing.JButton jbLimpiar;
    private javax.swing.JButton jbLimpiarTablaAsistencia;
    private javax.swing.JButton jbModificarAsistencia;
    private javax.swing.JComboBox<String> jcClase;
    private javax.swing.JComboBox<String> jcListar;
    private javax.swing.JComboBox<String> jcSocio;
    private javax.swing.JLabel jlError;
    private javax.swing.JTextField jtCarteNombreClase;
    private javax.swing.JTextField jtCartelAsistencia;
    private javax.swing.JTextField jtCartelSocio;
    private javax.swing.JTextField jtCartelTipoMembresia;
    private javax.swing.JTextField jtEntrenador;
    private javax.swing.JTextField jtFormularioGestionMembresia;
    private javax.swing.JTextField jtIdAsistencia;
    private javax.swing.JTable jtListadoAsistencia;
    // End of variables declaration//GEN-END:variables
    
    private void cargar(){
        AsistenciaData asistenciaData = new AsistenciaData();
        Asistencia asistencia = new Asistencia();
        SocioData socioData = new SocioData();
        Socio socio;
        ClaseData claseData = new ClaseData();
        Clase clase;
        MembresiaData membresiaData = new MembresiaData();
            try {
                int id_socio = cargarSocio();
                int id_clase = cargarClase();
                if(asistenciaData.membresiaActiva(id_socio)){ 
                    if(cargarClase()!=0){
                        socio = socioData.buscarSocioPorId(id_socio);
                        asistencia.setId_socio(socio);
                        clase = claseData.buscarClasePorId(id_clase);
                        asistencia.setId_clase(clase);
                        LocalDate fechaHoy = LocalDate.now();
                        asistencia.setFecha_asistencia(Date.valueOf(fechaHoy)); 
                        LocalTime horaActual = LocalTime.now();
                        Time horario = Time.valueOf(horaActual);
                        asistencia.setHora_asistencia(horario);
                       if(verificarAsistencia(asistencia)){
                            asistenciaData.registrarAsistencia(asistencia); 
                            asistenciaData.descontarAsistencia(id_clase);
                            membresiaData.descontarPases(id_socio);
                        }
                    }else{    
                        JOptionPane.showMessageDialog(null, "La Clase no existe o no tiene mas capacidad!!!");
                        limpiarTodo();  
                    }
                }else{
                    JOptionPane.showMessageDialog(null, "Membresia vencida!!!");
                  
                }  
            }catch(NullPointerException ne){
              
            }catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error al cargar asistencia");
            }    
    }
    
    private int cargarSocio(){
        SocioData socioData = new SocioData();
        List<Socio> socios;
        int idSocio = 0;
        socios = socioData.listarSocios2(1);
        for (Socio socio1 : socios) {
            if((socio1.getNombre()+" "+socio1.getApellido()).equals(jcSocio.getSelectedItem())){
                idSocio = socio1.getId_socio();
            }
        }
    return idSocio;
    }
    
    private int cargarClase() throws Exception{
        ClaseData claseData = new ClaseData();
        List<Clase> clases;
        int idClase = 0;
        try{
            LocalTime horaActual = LocalTime.now();//horario actual real
            Time horario = Time.valueOf(horaActual);
            int horaComoEntero = horario.getHours();
            LocalTime localTime = LocalTime.of(horaComoEntero, 0);
            clases = claseData.buscarClasePorHorario(Time.valueOf(localTime));
            for (Clase clase : clases) {
                if(clase.getNombre().equals((String)jcClase.getSelectedItem())){
                    idClase = clase.getId_clase();
                     break;   
                }
             
            }
           
        }catch(HeadlessException e){
            JOptionPane.showMessageDialog(null,"Error en carga de Clase de Asistencia"+e.getMessage());
        }
         //if(idClase==0)  JOptionPane.showMessageDialog(null,"No se encontro la Clase en ese horario");
    return idClase;
    }
    
    private boolean verificarAsistencia(Asistencia asistencia) {
    AsistenciaData asistenciaData = new AsistenciaData();
    List<Asistencia> listaAsistencia = asistenciaData.listarAsistencia();

    for (Asistencia asistencia1 : listaAsistencia) {
        if (asistencia.getId_socio().getId_socio() == asistencia1.getId_socio().getId_socio() &&
            asistencia.getId_clase().getId_clase() == asistencia1.getId_clase().getId_clase()) {
            JOptionPane.showMessageDialog(null, "Ya existe una asistencia para ese Socio y esa Clase");
            
            return false;
        }
    }
    return true;
}

    
    private void llenarSelectorSocio(){
        SocioData socioData = new SocioData();
        Socio socio = new Socio();
        List<Socio> socios;
        socios = socioData.listarSocios2(1);
        for (Socio socio1 : socios) {
            jcSocio.addItem(socio1.getNombre()+" "+socio1.getApellido());
        }
    }
    
    private void llenarSelectorClase(){
        FormEntrenador formEntrenador = new FormEntrenador();
        List<String> listaEspecialidades;
        listaEspecialidades = formEntrenador.armarEspecialidades();
        for (String especialidades : listaEspecialidades) {
            jcClase.addItem(especialidades);
        }  
    }
    
    private void armarCabecera(){
        
         modelo.addColumn("Nombre Socio");
         modelo.addColumn("Apellido Socio");
         modelo.addColumn("Nombre Clase");
         modelo.addColumn("Cupo Clase");
         modelo.addColumn("Fecha");
         modelo.addColumn("Hora");
         modelo.addColumn("Nombre Entrenador");
         modelo.addColumn("Apellido Entrenador");
        
         jtListadoAsistencia.setModel(modelo);
    }
 
    private void limpiarTodo(){
        jtEntrenador=null;
        //jcHora.setSelectedIndex(0);
        jcSocio.setSelectedIndex(0);
        jcClase.setSelectedIndex(0);
    }
    
    private void limpiarTabla(){
        DefaultTableModel model = (DefaultTableModel) jtListadoAsistencia.getModel();
        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }
    
    private void llenarVector(Asistencia c){ 
       
        Vector renglon = new Vector<>();
        renglon.add(c.getId_socio().getNombre());
        renglon.add(c.getId_socio().getApellido());
        renglon.add(c.getId_clase().getNombre());
        renglon.add(c.getId_clase().getCapacidad());
        renglon.add(c.getFecha_asistencia());
        renglon.add(c.getHora_asistencia());
        renglon.add(c.getId_clase().getId_entrenador().getNombre());
        renglon.add(c.getId_clase().getId_entrenador().getApellido());
        
        
        modelo.addRow(renglon);
         
    }
    
    private void llenarVectorListado(){
        Asistencia asistencia;
        AsistenciaData asistenciaData = new AsistenciaData();
        List<Asistencia> asistencias = new ArrayList<>();
        
        switch(jcListar.getSelectedIndex()){
            case 0:
                asistencias = asistenciaData.listarAsistencia();
                break;
////            case 1:
////                clases = claseData.listarClase2(jcListar.getSelectedIndex());
////                break;
////            case 2:
////                clases = claseData.listarClase2(jcListar.getSelectedIndex());
////                break;
////            
////            case 3://Por nombre
////                java.util.List<String> nombres = new ArrayList<>();
////                for (int i = 0; i < jcNombreClase.getItemCount(); i++) {
////                    nombres.add(i, ((String) jcNombreClase.getItemAt(i)));
////                }
////                String[] porNombre = nombres.toArray(new String[0]);
////                String seleccion = (String) JOptionPane.showInputDialog(null,"Nombre","Busqueda de Clase por Nombre",JOptionPane.QUESTION_MESSAGE,null,porNombre, porNombre[0]);
////                clases = claseData.buscarClasePorNombre(seleccion);
////                break;
////                
////            case 4://Por entrenador
////                java.util.List<String> entrenadores = new ArrayList<>();
////                java.util.List<Entrenador> listaEntrenador, nuevaLista;
////                Entrenador entrenador = new Entrenador();
////                EntrenadorData entrenadorData = new EntrenadorData();
//////                FormEntrenador formEntrenador = new FormEntrenador();
//////                for (int i = 0; i < jcEntrenador.getItemCount(); i++) {
//////                    entrenadores.add(i, ((String) jcEntrenador.getItemAt(i)));
//////                }
////                nuevaLista = entrenadorData.listarEntrenadores();
////                for (Entrenador entrenador1 : nuevaLista) {
////                    entrenadores.add(entrenador1.getNombre()+" "+entrenador1.getApellido());
////                }
////                
////                String[] porEntrenador = entrenadores.toArray(new String[0]);
////                String seleccionEntrenador = (String) JOptionPane.showInputDialog(null,"Entrenador","Busqueda de Clase por Entrenador",JOptionPane.QUESTION_MESSAGE,null,porEntrenador, porEntrenador[0]);
////            
////                try {
////                    entrenador = cargarEntrenador(seleccionEntrenador);
////                } catch (Exception ex) {
////                    JOptionPane.showMessageDialog(null,"Error en metodo carga Entrenador", "Imposible cargar", JOptionPane.ERROR_MESSAGE);
////                }
////            
////                listaEntrenador = entrenadorData.buscarEntrenadorPorNombreYApellido(entrenador.getNombre(), entrenador.getApellido());
////                //String[] vectorEntrenador = listaEntrenador.toArray(new String[0]);
////                clases = claseData.buscarClasePorEntrenador(listaEntrenador.get(0).getId_entrenador());
////                break;
////
//
////            case 5://Por horario
//                //List<String> horas = new ArrayList<>();
////                for (int i = 0; i < jcHorario.getItemCount(); i++) {
////                    horas.add(i, ((String) jcHorario.getItemAt(i)));
////                }
////                //String[] porHora = horas.toArray(new String[0]);18
////                String[] porHora ={"6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22"};
////                String seleccionHora = (String) JOptionPane.showInputDialog(null,"Horario","Busqueda de Clase por Horario",JOptionPane.QUESTION_MESSAGE,null,porHora, porHora[0]);
////                LocalTime localTime = LocalTime.of(Integer.parseInt(seleccionHora), 0);
////                Time sqlTime = Time.valueOf(localTime);
////                clases = claseData.buscarClasePorHorario(sqlTime);
////                break;
////        }}
//        
            
        }
         for (Asistencia asistencia1 : asistencias) {
             llenarVector(asistencia1);
            }
    }
//    private void eliminar(){
//        int selectedRow = jtListadoAsistencia.getSelectedRow();
//            if(selectedRow != -1) {
//                int respuesta = JOptionPane.showConfirmDialog(jbEliminarAsistencia,"Â¿Desea continuar con la eliminaciÃ³n?","ConfirmaciÃ³n", JOptionPane.YES_NO_OPTION);
//                if (respuesta == JOptionPane.YES_OPTION) {
//                    ClaseData claseData = new ClaseData();
//                    Object value = jtListadoClase.getValueAt(selectedRow, 0);
//                    if(String.valueOf(jtListadoClase.getValueAt(selectedRow, 5)).equals("Activa")){
//                        claseData.eliminarClase(Integer.parseInt(value.toString()));
//                        modelo.removeRow(selectedRow);
//                    }else{
//                        JOptionPane.showMessageDialog(null,"La Clase ya fue eliminada o dada de baja", "Imposible Eliminar Clase", JOptionPane.ERROR_MESSAGE);
//                    }
//                }else{
//                    if(respuesta == JOptionPane.NO_OPTION) {
//                       jtListadoClase.clearSelection();
//                    }       
//                }   
//            }else {
//                JOptionPane.showMessageDialog(null, "Para eliminar seleccione una Clase");
//            }
//        limpiarTabla();
//        llenarVectorListado();
//    }
}

